#!/bin/bash
#
# Foundation Layer: Cognitive Kernel Build Script
# Implements rigorous build & test for Scheme/C++/C with ggml kernel adaptation
#
set -e

# ========================================================================
# Foundation Layer Configuration
# ========================================================================

# Tensor shape parameterization: [modules, build-steps, tests]
TENSOR_MODULES=${TENSOR_MODULES:-"cogutil,moses,external-tools,sheaf"}
TENSOR_BUILD_STEPS=${TENSOR_BUILD_STEPS:-"configure,compile,link,test"}
TENSOR_TESTS=${TENSOR_TESTS:-"unit,integration,recursive"}

# GGML kernel adaptation parameters
GGML_SUPPORT=${GGML_SUPPORT:-ON}
GGML_BACKEND=${GGML_BACKEND:-"cpu,gpu"}
TENSOR_PRECISION=${TENSOR_PRECISION:-"fp32,fp16"}

# Multi-architecture hardware matrix
ENABLE_MULTIARCH=${ENABLE_MULTIARCH:-ON}
TARGET_ARCHS=${TARGET_ARCHS:-"x86_64,arm64,riscv64"}

# Build configuration
BUILD_TYPE=${BUILD_TYPE:-Release}
INSTALL_PREFIX=${INSTALL_PREFIX:-/usr/local}
JOBS=${JOBS:-$(nproc)}
BUILD_DIR=${BUILD_DIR:-$(pwd)/build-foundation}

# Foundation layer components (in dependency order)
FOUNDATION_COMPONENTS=(
    "cogutil"           # Core utilities - foundation of all OpenCog
    "external-tools"    # External tool integrations 
    "moses"             # Evolutionary algorithms with tensor support
    "rust_crates"       # Rust bindings for performance
)

echo "=========================================="
echo "Foundation Layer: Cognitive Kernel Build"
echo "=========================================="
echo "Tensor Modules: $TENSOR_MODULES"
echo "Build Steps: $TENSOR_BUILD_STEPS"
echo "Test Types: $TENSOR_TESTS"
echo "GGML Support: $GGML_SUPPORT"
echo "Target Architectures: $TARGET_ARCHS"
echo "Build Type: $BUILD_TYPE"
echo "Jobs: $JOBS"
echo ""

# ========================================================================
# Hardware Matrix Detection
# ========================================================================

detect_hardware_capabilities() {
    echo "Detecting hardware capabilities..."
    
    # CPU architecture
    ARCH=$(uname -m)
    echo "  Architecture: $ARCH"
    
    # CPU features
    if [ -f /proc/cpuinfo ]; then
        CPU_FEATURES=$(grep -m1 '^flags' /proc/cpuinfo | cut -d: -f2)
        echo "  CPU Features: $CPU_FEATURES"
        
        # Check for specific tensor/ML acceleration
        if echo "$CPU_FEATURES" | grep -q "avx2"; then
            echo "  ✓ AVX2 support detected"
            TENSOR_ACCEL="$TENSOR_ACCEL,avx2"
        fi
        if echo "$CPU_FEATURES" | grep -q "avx512"; then
            echo "  ✓ AVX512 support detected"
            TENSOR_ACCEL="$TENSOR_ACCEL,avx512"
        fi
    fi
    
    # Memory info
    if [ -f /proc/meminfo ]; then
        TOTAL_MEM=$(grep MemTotal /proc/meminfo | awk '{print $2}')
        echo "  Total Memory: ${TOTAL_MEM}KB"
    fi
    
    # GPU detection
    if command -v nvidia-smi >/dev/null 2>&1; then
        echo "  ✓ NVIDIA GPU detected"
        TENSOR_ACCEL="$TENSOR_ACCEL,cuda"
    fi
    
    echo "  Tensor Acceleration: $TENSOR_ACCEL"
    echo ""
}

# ========================================================================
# Tensor Shape Configuration
# ========================================================================

configure_tensor_shapes() {
    local component=$1
    echo "Configuring tensor shapes for $component..."
    
    # Create tensor configuration file for each module
    local tensor_config="$BUILD_DIR/$component/tensor_config.cmake"
    mkdir -p "$(dirname "$tensor_config")"
    
    cat > "$tensor_config" << EOF
# Tensor Configuration for $component
# Generated by Foundation Layer Build System

# Tensor shape parameters
SET(TENSOR_MODULE_NAME "$component")
SET(TENSOR_BUILD_STEPS "$TENSOR_BUILD_STEPS")
SET(TENSOR_TEST_TYPES "$TENSOR_TESTS")

# GGML kernel adaptation
SET(GGML_SUPPORT $GGML_SUPPORT)
SET(GGML_BACKEND "$GGML_BACKEND")
SET(TENSOR_PRECISION "$TENSOR_PRECISION")

# Hardware-specific optimizations
SET(TARGET_ARCHITECTURE "$ARCH")
SET(TENSOR_ACCELERATION "$TENSOR_ACCEL")

# Recursive implementation flags
SET(RECURSIVE_COGNITIVE_KERNEL ON)
SET(NO_MOCK_IMPLEMENTATIONS ON)

# Degrees of freedom documentation
SET(TENSOR_DOF_SPATIAL "3D")
SET(TENSOR_DOF_TEMPORAL "time-series")
SET(TENSOR_DOF_SEMANTIC "concept-space")
SET(TENSOR_DOF_LOGICAL "inference-chains")
EOF

    echo "  Tensor config written to: $tensor_config"
}

# ========================================================================
# Enhanced Build Function with Tensor Support
# ========================================================================

build_foundation_component() {
    local component=$1
    local source_dir="orc-dv/$component"
    
    echo "Building foundation component: $component"
    echo "  Source: $source_dir"
    
    if [ ! -d "$source_dir" ]; then
        echo "  Warning: $source_dir not found, skipping $component"
        return 0
    fi
    
    # Create component build directory
    local comp_build_dir="$BUILD_DIR/$component"
    mkdir -p "$comp_build_dir"
    cd "$comp_build_dir"
    
    # Configure tensor shapes for this component
    configure_tensor_shapes "$component"
    
    # Enhanced CMake configuration with tensor support
    echo "  Configuring with tensor support..."
    cmake "../../$source_dir" \
        -DCMAKE_BUILD_TYPE="$BUILD_TYPE" \
        -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" \
        -DCMAKE_PREFIX_PATH="$INSTALL_PREFIX" \
        -DGGML_SUPPORT="$GGML_SUPPORT" \
        -DENABLE_MULTIARCH="$ENABLE_MULTIARCH" \
        -DTENSOR_ACCELERATION="$TENSOR_ACCEL" \
        -DRECURSIVE_IMPLEMENTATION=ON \
        -DDEBUG_TENSOR_SHAPES=ON \
        -DGENERATE_ARTIFACTS=ON \
        || {
            echo "  CMake configuration failed for $component"
            return 1
        }
    
    # Build with tensor-aware compilation
    echo "  Building..."
    make -j"$JOBS" || {
        echo "  Build failed for $component"
        return 1
    }
    
    # Install component
    echo "  Installing..."
    make install || {
        echo "  Install failed for $component"
        return 1
    }
    
    # Run tensor-aware tests if available
    if [ -f "Makefile" ] && make -n test >/dev/null 2>&1; then
        echo "  Running tensor tests..."
        make test || {
            echo "  Tests failed for $component"
            return 1
        }
    fi
    
    # Generate artifacts for downstream jobs
    generate_component_artifacts "$component"
    
    cd "$BUILD_DIR"
    echo "  ✓ $component built successfully!"
    echo ""
}

# ========================================================================
# Artifact Generation
# ========================================================================

generate_component_artifacts() {
    local component=$1
    local artifact_dir="$BUILD_DIR/artifacts/$component"
    mkdir -p "$artifact_dir"
    
    echo "  Generating artifacts for $component..."
    
    # Copy headers, libraries, and configs
    if [ -d "$INSTALL_PREFIX/include/opencog" ]; then
        cp -r "$INSTALL_PREFIX/include/opencog"/* "$artifact_dir/" 2>/dev/null || true
    fi
    
    # Copy tensor configuration
    if [ -f "tensor_config.cmake" ]; then
        cp tensor_config.cmake "$artifact_dir/"
    fi
    
    # Generate component manifest
    cat > "$artifact_dir/manifest.json" << EOF
{
    "component": "$component",
    "version": "$(date +%Y%m%d%H%M%S)",
    "tensor_support": true,
    "ggml_enabled": $GGML_SUPPORT,
    "architecture": "$ARCH",
    "acceleration": "$TENSOR_ACCEL",
    "recursive_implementation": true,
    "build_timestamp": "$(date -Iseconds)"
}
EOF
    
    echo "  Artifacts generated in: $artifact_dir"
}

# ========================================================================
# Main Build Process
# ========================================================================

main() {
    # Create build directory
    mkdir -p "$BUILD_DIR"
    cd "$BUILD_DIR"
    
    # Detect hardware capabilities
    detect_hardware_capabilities
    
    # Build foundation components in dependency order
    echo "Building foundation layer components..."
    for component in "${FOUNDATION_COMPONENTS[@]}"; do
        build_foundation_component "$component"
    done
    
    # Generate final build report
    generate_build_report
    
    echo ""
    echo "=========================================="
    echo "Foundation Layer Build Complete!"
    echo "=========================================="
    echo "Artifacts location: $BUILD_DIR/artifacts/"
    echo "Install prefix: $INSTALL_PREFIX"
    echo ""
}

# ========================================================================
# Build Report Generation
# ========================================================================

generate_build_report() {
    echo "Generating foundation layer build report..."
    
    local report_file="$BUILD_DIR/foundation_build_report.json"
    cat > "$report_file" << EOF
{
    "foundation_layer_build": {
        "timestamp": "$(date -Iseconds)",
        "tensor_configuration": {
            "modules": "$TENSOR_MODULES",
            "build_steps": "$TENSOR_BUILD_STEPS", 
            "test_types": "$TENSOR_TESTS"
        },
        "ggml_configuration": {
            "enabled": $GGML_SUPPORT,
            "backend": "$GGML_BACKEND",
            "precision": "$TENSOR_PRECISION"
        },
        "hardware_matrix": {
            "architecture": "$ARCH",
            "acceleration": "$TENSOR_ACCEL",
            "multiarch_enabled": $ENABLE_MULTIARCH
        },
        "components_built": [
$(for comp in "${FOUNDATION_COMPONENTS[@]}"; do echo "            \"$comp\","; done | sed '$ s/,$//')
        ],
        "recursive_implementation": true,
        "artifacts_generated": true
    }
}
EOF
    
    echo "Build report: $report_file"
}

# Execute main build process
main "$@"