version: 2.1

# Orchestrated AtomSpace CI/CD Pipeline
# Builds all AtomSpace components in proper dependency order

workflows:
  version: 2
  build-atomspace-orchestration:
    jobs:
      - build-core-dependencies
      - build-atomspace:
          requires:
            - build-core-dependencies
      - build-storage-backends:
          requires:
            - build-atomspace
      - build-network-interfaces:
          requires:
            - build-storage-backends
      - build-agents-and-extensions:
          requires:
            - build-network-interfaces
      - build-language-bindings:
          requires:
            - build-agents-and-extensions

jobs:
  build-core-dependencies:
    docker:
      - image: $CIRCLE_PROJECT_USERNAME/opencog-deps
        user: root
        environment:
          CCACHE_DIR: /ws/ccache
    working_directory: /ws
    steps:
      - run:
          name: Start restoring ccache
          command: date +%d-%m-%Y > /tmp/date
      - restore_cache:
          keys:
            - ccache-{{ checksum "/tmp/date" }}
            - ccache-
      - run:
          name: Install CogUtil
          command: |
            git clone --depth 1 https://github.com/$CIRCLE_PROJECT_USERNAME/cogutil /ws/cogutil
            mkdir -p /ws/cogutil/build
            cd /ws/cogutil/build && cmake .. && make -j2 && make -j2 install
            ldconfig
      - save_cache:
          key: ccache-{{ checksum "/tmp/date" }}
          paths:
            - /ws/ccache
      - persist_to_workspace:
          root: /ws
          paths:
            - ccache

  build-atomspace:
    docker:
      - image: $CIRCLE_PROJECT_USERNAME/opencog-deps
        user: root
        environment:
          PGHOST: opencog-postgres
          PGUSER: opencog_test
          PGPASSWORD: cheese
          CCACHE_DIR: /ws/ccache
      - image: $CIRCLE_PROJECT_USERNAME/postgres
        name: opencog-postgres
    working_directory: /ws/orc-as
    steps:
      - attach_workspace:
          at: /ws
      - checkout:
          path: /ws/orc-as
      - restore_cache:
          name: Restore GHC Cache
          keys:
            - ghc-{{checksum "/ws/orc-as/atomspace/opencog/haskell/stack.yaml"}}-{{ arch }}
      - restore_cache:
          name: Restore Haskell Deps Cache
          keys:
            - haskelldeps-{{checksum "/ws/orc-as/atomspace/opencog/haskell/stack.yaml"}}-{{checksum "/ws/orc-as/atomspace/opencog/haskell/opencog-atomspace.cabal"}}-{{ arch }}
      - run:
          name: CMake Configure AtomSpace Core
          command: |
            mkdir -p /ws/orc-as/atomspace/build
            cd /ws/orc-as/atomspace/build && cmake ..
      - run:
          name: Build AtomSpace Core
          command: cd /ws/orc-as/atomspace/build && make -j2
      - run:
          name: Build AtomSpace Tests
          command: cd /ws/orc-as/atomspace/build && make -j2 tests
      - run:
          name: Run AtomSpace Tests
          command: cd /ws/orc-as/atomspace/build && make -j2 test ARGS=-j2
      - run:
          name: Install AtomSpace Core
          command: cd /ws/orc-as/atomspace/build && make -j2 install && ldconfig
      - save_cache:
          name: Save GHC Cache
          key: ghc-{{checksum "/ws/orc-as/atomspace/opencog/haskell/stack.yaml"}}-{{ arch }}
          paths:
            - ~/.stack
      - save_cache:
          name: Save Haskell Deps Cache
          key: haskelldeps-{{checksum "/ws/orc-as/atomspace/opencog/haskell/stack.yaml"}}-{{checksum "/ws/orc-as/atomspace/opencog/haskell/opencog-atomspace.cabal"}}-{{ arch }}
          paths:
            - /ws/orc-as/atomspace/opencog/haskell/.stack-work
      - persist_to_workspace:
          root: /ws
          paths:
            - orc-as
            - ccache

  build-storage-backends:
    docker:
      - image: $CIRCLE_PROJECT_USERNAME/opencog-deps
        user: root
        environment:
          PGHOST: opencog-postgres
          PGUSER: opencog_test
          PGPASSWORD: cheese
          CCACHE_DIR: /ws/ccache
      - image: $CIRCLE_PROJECT_USERNAME/postgres
        name: opencog-postgres
    working_directory: /ws/orc-as
    steps:
      - attach_workspace:
          at: /ws
      - run:
          name: Build AtomSpace-Rocks
          command: |
            if [ -f "atomspace-rocks/CMakeLists.txt" ]; then
              mkdir -p atomspace-rocks/build
              cd atomspace-rocks/build && cmake .. && make -j2 && make -j2 install && ldconfig
            fi
      - run:
          name: Build AtomSpace-Bridge
          command: |
            if [ -f "atomspace-bridge/CMakeLists.txt" ]; then
              mkdir -p atomspace-bridge/build
              cd atomspace-bridge/build && cmake .. && make -j2 && make -j2 install && ldconfig
            fi
      - persist_to_workspace:
          root: /ws
          paths:
            - orc-as
            - ccache

  build-network-interfaces:
    docker:
      - image: $CIRCLE_PROJECT_USERNAME/opencog-deps
        user: root
        environment:
          CCACHE_DIR: /ws/ccache
    working_directory: /ws/orc-as
    steps:
      - attach_workspace:
          at: /ws
      - run:
          name: Build AtomSpace-Cog
          command: |
            if [ -f "atomspace-cog/CMakeLists.txt" ]; then
              mkdir -p atomspace-cog/build
              cd atomspace-cog/build && cmake .. && make -j2 && make -j2 install && ldconfig
            fi
      - run:
          name: Build AtomSpace-RESTful
          command: |
            if [ -f "atomspace-restful/CMakeLists.txt" ]; then
              mkdir -p atomspace-restful/build
              cd atomspace-restful/build && cmake .. && make -j2 && make -j2 install && ldconfig
            fi
      - run:
          name: Build AtomSpace-RPC
          command: |
            if [ -f "atomspace-rpc/CMakeLists.txt" ]; then
              mkdir -p atomspace-rpc/build
              cd atomspace-rpc/build && cmake .. && make -j2 && make -j2 install && ldconfig
            fi
      - run:
          name: Build AtomSpace-WebSockets
          command: |
            if [ -f "atomspace-websockets/CMakeLists.txt" ]; then
              mkdir -p atomspace-websockets/build
              cd atomspace-websockets/build && cmake .. && make -j2 && make -j2 install && ldconfig
            fi
      - persist_to_workspace:
          root: /ws
          paths:
            - orc-as
            - ccache

  build-agents-and-extensions:
    docker:
      - image: $CIRCLE_PROJECT_USERNAME/opencog-deps
        user: root
        environment:
          CCACHE_DIR: /ws/ccache
    working_directory: /ws/orc-as
    steps:
      - attach_workspace:
          at: /ws
      - run:
          name: Build AtomSpace-Agents
          command: |
            if [ -f "atomspace-agents/CMakeLists.txt" ]; then
              mkdir -p atomspace-agents/build
              cd atomspace-agents/build && cmake .. && make -j2 && make -j2 install && ldconfig
            fi
      - run:
          name: Build AtomSpace-DHT
          command: |
            if [ -f "atomspace-dht/CMakeLists.txt" ]; then
              mkdir -p atomspace-dht/build
              cd atomspace-dht/build && cmake .. && make -j2 && make -j2 install && ldconfig
            fi
      - run:
          name: Build AtomSpace-IPFS
          command: |
            if [ -f "atomspace-ipfs/CMakeLists.txt" ]; then
              mkdir -p atomspace-ipfs/build
              cd atomspace-ipfs/build && cmake .. && make -j2 && make -j2 install && ldconfig
            fi
      - run:
          name: Build AtomSpace-MeTTa
          command: |
            if [ -f "atomspace-metta/CMakeLists.txt" ]; then
              mkdir -p atomspace-metta/build
              cd atomspace-metta/build && cmake .. && make -j2 && make -j2 install && ldconfig
            fi
      - persist_to_workspace:
          root: /ws
          paths:
            - orc-as
            - ccache

  build-language-bindings:
    docker:
      - image: $CIRCLE_PROJECT_USERNAME/opencog-deps
        user: root
        environment:
          CCACHE_DIR: /ws/ccache
    working_directory: /ws/orc-as
    steps:
      - attach_workspace:
          at: /ws
      - run:
          name: Build AtomSpace-JS (if applicable)
          command: |
            if [ -f "atomspace-js/CMakeLists.txt" ]; then
              mkdir -p atomspace-js/build
              cd atomspace-js/build && cmake .. && make -j2 && make -j2 install && ldconfig
            elif [ -f "atomspace-js/package.json" ]; then
              cd atomspace-js && npm install && npm run build
            fi
      - run:
          name: Build AtomSpace-TypeScript (if applicable)
          command: |
            if [ -f "atomspace-typescript/CMakeLists.txt" ]; then
              mkdir -p atomspace-typescript/build
              cd atomspace-typescript/build && cmake .. && make -j2 && make -j2 install && ldconfig
            elif [ -f "atomspace-typescript/package.json" ]; then
              cd atomspace-typescript && npm install && npm run build
            fi
      - run:
          name: Build AtomSpace-Explorer (if applicable)
          command: |
            if [ -f "atomspace-explorer/CMakeLists.txt" ]; then
              mkdir -p atomspace-explorer/build
              cd atomspace-explorer/build && cmake .. && make -j2 && make -j2 install && ldconfig
            elif [ -f "atomspace-explorer/package.json" ]; then
              cd atomspace-explorer && npm install && npm run build
            fi
      - save_cache:
          key: ccache-{{ checksum "/tmp/date" }}
          paths:
            - /ws/ccache