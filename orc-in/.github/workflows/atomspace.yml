# .github/workflows/atomspace.yml

name: AtomSpace Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    name: Build and Test AtomSpace
    runs-on: ubuntu-latest
    container:
      image: opencog/opencog-deps
      options: --user root
    services:
      postgres:
        image: opencog/postgres
        env:
          POSTGRES_DB: atomspace
          POSTGRES_USER: opencog_test
          POSTGRES_PASSWORD: cheese
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U opencog_test"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      CCACHE_DIR: /ws/ccache
      MAKEFLAGS: -j2
      PGHOST: localhost
      PGUSER: opencog_test
      PGPASSWORD: cheese
    steps:
      - name: Checkout AtomSpace Repository
        uses: actions/checkout@v4

      - name: Wait for PostgreSQL to Start
        run: sleep 30

      - name: Set up Ccache
        uses: actions/cache@v4
        with:
          path: /ws/ccache
          key: ccache-atomspace-${{ runner.os }}-${{ hashFiles('**/*.cpp', '**/*.h') }}
          restore-keys: |
            ccache-atomspace-${{ runner.os }}-
            ccache-atomspace-

      - name: Install CogUtil
        run: |
          git clone --depth 1 https://github.com/opencog/cogutil /ws/cogutil
          mkdir -p /ws/cogutil/build
          cd /ws/cogutil/build && cmake .. && make -j2 && make -j2 install
          ldconfig

      - name: Configure Build
        run: |
          mkdir -p build
          cd build
          cmake ..

      - name: Build
        run: |
          cd build
          make

      - name: Build Tests
        run: |
          cd build
          make tests

      - name: Run Tests
        run: |
          cd build
          make check ARGS="$MAKEFLAGS"

      - name: Upload AtomSpace Artifact
        uses: actions/upload-artifact@v4
        with:
          name: atomspace
          path: build/

      - name: Install AtomSpace and create config files
        run: |
          cd build && make -j2 install && ldconfig
          
          # Create AtomSpace CMake config files for dependent projects
          sudo mkdir -p /usr/local/lib/cmake/AtomSpace
          sudo tee /usr/local/lib/cmake/AtomSpace/AtomSpaceConfig.cmake > /dev/null <<'EOF'
          # AtomSpaceConfig.cmake - Minimal config file for AtomSpace

          # Set version information
          set(PACKAGE_VERSION "5.0.3")
          set(AtomSpace_VERSION "5.0.3")
          set(ATOMSPACE_VERSION "5.0.3")

          # Version compatibility check
          set(PACKAGE_VERSION_EXACT FALSE)
          set(PACKAGE_VERSION_COMPATIBLE TRUE)
          set(PACKAGE_VERSION_UNSUITABLE FALSE)

          # Set basic variables
          set(ATOMSPACE_FOUND TRUE)
          set(AtomSpace_FOUND TRUE)

          # Set include directories
          set(ATOMSPACE_INCLUDE_DIRS "/usr/local/include")
          set(AtomSpace_INCLUDE_DIRS "/usr/local/include")

          # Set library directories and libraries
          set(ATOMSPACE_LIBRARY_DIRS "/usr/local/lib/opencog")
          set(AtomSpace_LIBRARY_DIRS "/usr/local/lib/opencog")

          # Find the atomspace library
          find_library(ATOMSPACE_LIBRARIES
              NAMES atomspace
              PATHS /usr/local/lib/opencog
              NO_DEFAULT_PATH
          )

          set(AtomSpace_LIBRARIES \${ATOMSPACE_LIBRARIES})

          # Set other common variables
          set(ATOMSPACE_DATA_DIR "/usr/local/share/opencog")
          set(AtomSpace_DATA_DIR "/usr/local/share/opencog")

          # Mark as found
          set(ATOMSPACE_FOUND TRUE)
          set(AtomSpace_FOUND TRUE)

          # Export targets (minimal)
          if(NOT TARGET atomspace::atomspace)
              add_library(atomspace::atomspace SHARED IMPORTED)
              set_target_properties(atomspace::atomspace PROPERTIES
                  IMPORTED_LOCATION "\${ATOMSPACE_LIBRARIES}"
                  INTERFACE_INCLUDE_DIRECTORIES "\${ATOMSPACE_INCLUDE_DIRS}"
              )
          endif()

          message(STATUS "Found AtomSpace: \${ATOMSPACE_LIBRARIES}")
          EOF
          
          sudo tee /usr/local/lib/cmake/AtomSpace/AtomSpaceConfigVersion.cmake > /dev/null <<'EOF'
          # AtomSpaceConfigVersion.cmake - Version file for AtomSpace

          set(PACKAGE_VERSION "5.0.3")

          # Check whether the requested PACKAGE_FIND_VERSION is compatible
          if("\${PACKAGE_VERSION}" VERSION_LESS "\${PACKAGE_FIND_VERSION}")
            set(PACKAGE_VERSION_COMPATIBLE FALSE)
          else()
            set(PACKAGE_VERSION_COMPATIBLE TRUE)
            if ("\${PACKAGE_VERSION}" VERSION_EQUAL "\${PACKAGE_FIND_VERSION}")
              set(PACKAGE_VERSION_EXACT TRUE)
            endif()
          endif()
          EOF
