name: OpenCog Central Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:

  # ==== Foundation ====
  cogutil:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full git history for versioning
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev python3-nose valgrind doxygen
          
      - name: Build cogutil
        run: |
          cd orc-dv/cogutil
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          
      - name: Test cogutil
        run: |
          cd orc-dv/cogutil/build
          make test || true
          
      - name: Install cogutil
        run: |
          cd orc-dv/cogutil/build
          sudo make install
          sudo ldconfig
          
      - name: Cache cogutil build
        uses: actions/cache@v3
        with:
          path: orc-dv/cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}

  # ==== Core AtomSpace ====
  atomspace:
    runs-on: ubuntu-latest
    needs: [cogutil]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full git history for versioning
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev guile-3.0-dev cython3 python3-nose valgrind doxygen
          
      - name: Restore cogutil cache
        uses: actions/cache@v3
        with:
          path: orc-dv/cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}
          
      - name: Install cogutil
        run: |
          cd orc-dv/cogutil/build
          sudo make install
          sudo ldconfig
          
      - name: Build AtomSpace
        run: |
          cd orc-as/atomspace
          # Create missing lib directory if it doesn't exist
          if [ ! -d "lib" ]; then
            mkdir -p lib
            echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
          fi
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          
      - name: Test AtomSpace
        run: |
          cd orc-as/atomspace/build
          make test || true
          
      - name: Install AtomSpace
        run: |
          cd orc-as/atomspace/build
          sudo make install
          sudo ldconfig
          
      - name: Cache atomspace build
        uses: actions/cache@v3
        with:
          path: orc-as/atomspace/build
          key: atomspace-${{ runner.os }}-${{ github.sha }}

  atomspace-rocks:
    runs-on: ubuntu-latest
    needs: [atomspace]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev librocksdb-dev
          
      - name: Restore caches
        uses: actions/cache@v3
        with:
          path: |
            orc-dv/cogutil/build
            orc-as/atomspace/build
          key: deps-rocks-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-${{ github.sha }}
            atomspace-${{ runner.os }}-${{ github.sha }}
          
      - name: Diagnostic workspace check
        run: |
          echo "WORKSPACE:"
          ls -al
          echo "orc-dv:"
          ls -al orc-dv || true
          echo "orc-dv/cogutil:"
          ls -al orc-dv/cogutil || true
          echo "orc-as:"
          ls -al orc-as || true
          echo "orc-as/atomspace:"
          ls -al orc-as/atomspace || true
          
      - name: Install dependencies
        run: |
          # Check and rebuild cogutil if build directory missing
          if [ ! -d "orc-dv/cogutil/build" ]; then
            echo "cogutil build directory missing, rebuilding..."
            cd orc-dv/cogutil
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-dv/cogutil/build && sudo make install && sudo ldconfig
          
          # Check and rebuild atomspace if build directory missing  
          if [ ! -d "orc-as/atomspace/build" ]; then
            echo "atomspace build directory missing, rebuilding..."
            cd orc-as/atomspace
            # Create missing lib directory if it doesn't exist
            if [ ! -d "lib" ]; then
              mkdir -p lib
              echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
            fi
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-as/atomspace/build && sudo make install && sudo ldconfig
          
      - name: Build AtomSpace Rocks
        run: |
          cd orc-as/atomspace-rocks
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          
      - name: Test AtomSpace Rocks
        run: |
          cd orc-as/atomspace-rocks/build
          make test || true

  atomspace-restful:
    runs-on: ubuntu-latest
    needs: [atomspace]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev libcpprest-dev
          
      - name: Restore caches
        uses: actions/cache@v3
        with:
          path: |
            orc-dv/cogutil/build
            orc-as/atomspace/build
          key: deps-restful-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-${{ github.sha }}
            atomspace-${{ runner.os }}-${{ github.sha }}
          
      - name: Diagnostic workspace check
        run: |
          echo "WORKSPACE:"
          ls -al
          echo "orc-dv:"
          ls -al orc-dv || true
          echo "orc-dv/cogutil:"
          ls -al orc-dv/cogutil || true
          echo "orc-as:"
          ls -al orc-as || true
          echo "orc-as/atomspace:"
          ls -al orc-as/atomspace || true
          
      - name: Install dependencies
        run: |
          # Check and rebuild cogutil if build directory missing
          if [ ! -d "orc-dv/cogutil/build" ]; then
            echo "cogutil build directory missing, rebuilding..."
            cd orc-dv/cogutil
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-dv/cogutil/build && sudo make install && sudo ldconfig
          
          # Check and rebuild atomspace if build directory missing  
          if [ ! -d "orc-as/atomspace/build" ]; then
            echo "atomspace build directory missing, rebuilding..."
            cd orc-as/atomspace
            # Create missing lib directory if it doesn't exist
            if [ ! -d "lib" ]; then
              mkdir -p lib
              echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
            fi
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-as/atomspace/build && sudo make install && sudo ldconfig
          
      - name: Build AtomSpace RESTful
        run: |
          cd orc-as/atomspace-restful
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          
      - name: Test AtomSpace RESTful
        run: |
          cd orc-as/atomspace-restful/build
          make test || true

  # ==== Logic ====
  ure:
    runs-on: ubuntu-latest
    needs: [atomspace]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev
          
      - name: Restore caches
        uses: actions/cache@v3
        with:
          path: |
            orc-dv/cogutil/build
            orc-as/atomspace/build
          key: deps-ure-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-${{ github.sha }}
            atomspace-${{ runner.os }}-${{ github.sha }}
          
      - name: Diagnostic workspace check
        run: |
          echo "WORKSPACE:"
          ls -al
          echo "orc-dv:"
          ls -al orc-dv || true
          echo "orc-dv/cogutil:"
          ls -al orc-dv/cogutil || true
          echo "orc-as:"
          ls -al orc-as || true
          echo "orc-as/atomspace:"
          ls -al orc-as/atomspace || true
          
      - name: Install dependencies
        run: |
          # Check and rebuild cogutil if build directory missing
          if [ ! -d "orc-dv/cogutil/build" ]; then
            echo "cogutil build directory missing, rebuilding..."
            cd orc-dv/cogutil
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-dv/cogutil/build && sudo make install && sudo ldconfig
          
          # Check and rebuild atomspace if build directory missing  
          if [ ! -d "orc-as/atomspace/build" ]; then
            echo "atomspace build directory missing, rebuilding..."
            cd orc-as/atomspace
            # Create missing lib directory if it doesn't exist
            if [ ! -d "lib" ]; then
              mkdir -p lib
              echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
            fi
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-as/atomspace/build && sudo make install && sudo ldconfig
          
      - name: Build URE
        run: |
          cd orc-ai/ure
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          
      - name: Test URE
        run: |
          cd orc-ai/ure/build
          make test || true
          
      - name: Install URE
        run: |
          cd orc-ai/ure/build
          sudo make install
          sudo ldconfig
          
      - name: Cache ure build
        uses: actions/cache@v3
        with:
          path: orc-ai/ure/build
          key: ure-${{ runner.os }}-${{ github.sha }}

  # ==== Advanced ====
  pln:
    runs-on: ubuntu-latest
    needs: [ure]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev
          
      - name: Restore caches
        uses: actions/cache@v3
        with:
          path: |
            orc-dv/cogutil/build
            orc-as/atomspace/build
            orc-ai/ure/build
          key: deps-pln-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-${{ github.sha }}
            atomspace-${{ runner.os }}-${{ github.sha }}
            ure-${{ runner.os }}-${{ github.sha }}
          
      - name: Diagnostic workspace check
        run: |
          echo "WORKSPACE:"
          ls -al
          echo "orc-dv:"
          ls -al orc-dv || true
          echo "orc-dv/cogutil:"
          ls -al orc-dv/cogutil || true
          echo "orc-as:"
          ls -al orc-as || true
          echo "orc-as/atomspace:"
          ls -al orc-as/atomspace || true
          echo "orc-ai:"
          ls -al orc-ai || true
          echo "orc-ai/ure:"
          ls -al orc-ai/ure || true
          
      - name: Install dependencies
        run: |
          # Check and rebuild cogutil if build directory missing
          if [ ! -d "orc-dv/cogutil/build" ]; then
            echo "cogutil build directory missing, rebuilding..."
            cd orc-dv/cogutil
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-dv/cogutil/build && sudo make install && sudo ldconfig
          
          # Check and rebuild atomspace if build directory missing  
          if [ ! -d "orc-as/atomspace/build" ]; then
            echo "atomspace build directory missing, rebuilding..."
            cd orc-as/atomspace
            # Create missing lib directory if it doesn't exist
            if [ ! -d "lib" ]; then
              mkdir -p lib
              echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
            fi
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-as/atomspace/build && sudo make install && sudo ldconfig
          
          # Check and rebuild ure if build directory missing
          if [ ! -d "orc-ai/ure/build" ]; then
            echo "ure build directory missing, rebuilding..."
            cd orc-ai/ure
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-ai/ure/build && sudo make install && sudo ldconfig
          
      - name: Build PLN
        run: |
          cd orc-ai/pln
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          
      - name: Test PLN
        run: |
          cd orc-ai/pln/build
          make test || true

  miner:
    runs-on: ubuntu-latest
    needs: [ure]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev
          
      - name: Restore caches
        uses: actions/cache@v3
        with:
          path: |
            orc-dv/cogutil/build
            orc-as/atomspace/build
            orc-ai/ure/build
          key: deps-miner-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-${{ github.sha }}
            atomspace-${{ runner.os }}-${{ github.sha }}
            ure-${{ runner.os }}-${{ github.sha }}
          
      - name: Diagnostic workspace check
        run: |
          echo "WORKSPACE:"
          ls -al
          echo "orc-dv:"
          ls -al orc-dv || true
          echo "orc-dv/cogutil:"
          ls -al orc-dv/cogutil || true
          echo "orc-as:"
          ls -al orc-as || true
          echo "orc-as/atomspace:"
          ls -al orc-as/atomspace || true
          echo "orc-ai:"
          ls -al orc-ai || true
          echo "orc-ai/ure:"
          ls -al orc-ai/ure || true
          
      - name: Install dependencies
        run: |
          # Check and rebuild cogutil if build directory missing
          if [ ! -d "orc-dv/cogutil/build" ]; then
            echo "cogutil build directory missing, rebuilding..."
            cd orc-dv/cogutil
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-dv/cogutil/build && sudo make install && sudo ldconfig
          
          # Check and rebuild atomspace if build directory missing  
          if [ ! -d "orc-as/atomspace/build" ]; then
            echo "atomspace build directory missing, rebuilding..."
            cd orc-as/atomspace
            # Create missing lib directory if it doesn't exist
            if [ ! -d "lib" ]; then
              mkdir -p lib
              echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
            fi
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-as/atomspace/build && sudo make install && sudo ldconfig
          
          # Check and rebuild ure if build directory missing
          if [ ! -d "orc-ai/ure/build" ]; then
            echo "ure build directory missing, rebuilding..."
            cd orc-ai/ure
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-ai/ure/build && sudo make install && sudo ldconfig
          
      - name: Build Miner
        run: |
          cd orc-ai/miner
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          
      - name: Test Miner
        run: |
          cd orc-ai/miner/build
          make test || true

  moses:
    runs-on: ubuntu-latest
    needs: [cogutil]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev
          
      - name: Restore cogutil cache
        uses: actions/cache@v3
        with:
          path: orc-dv/cogutil/build
          key: cogutil-${{ runner.os }}-${{ github.sha }}
          
      - name: Diagnostic workspace check
        run: |
          echo "WORKSPACE:"
          ls -al
          echo "orc-dv:"
          ls -al orc-dv || true
          echo "orc-dv/cogutil:"
          ls -al orc-dv/cogutil || true
          
      - name: Install cogutil
        run: |
          # Check and rebuild cogutil if build directory missing
          if [ ! -d "orc-dv/cogutil/build" ]; then
            echo "cogutil build directory missing, rebuilding..."
            cd orc-dv/cogutil
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-dv/cogutil/build
          sudo make install
          sudo ldconfig
          
      - name: Build MOSES
        run: |
          cd orc-ai/moses
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          
      - name: Test MOSES
        run: |
          cd orc-ai/moses/build
          make test || true

  asmoses:
    runs-on: ubuntu-latest
    needs: [ure]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev
          
      - name: Restore caches
        uses: actions/cache@v3
        with:
          path: |
            orc-dv/cogutil/build
            orc-as/atomspace/build
            orc-ai/ure/build
          key: deps-asmoses-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-${{ github.sha }}
            atomspace-${{ runner.os }}-${{ github.sha }}
            ure-${{ runner.os }}-${{ github.sha }}
          
      - name: Diagnostic workspace check
        run: |
          echo "WORKSPACE:"
          ls -al
          echo "orc-dv:"
          ls -al orc-dv || true
          echo "orc-dv/cogutil:"
          ls -al orc-dv/cogutil || true
          echo "orc-as:"
          ls -al orc-as || true
          echo "orc-as/atomspace:"
          ls -al orc-as/atomspace || true
          echo "orc-ai:"
          ls -al orc-ai || true
          echo "orc-ai/ure:"
          ls -al orc-ai/ure || true
          
      - name: Install dependencies
        run: |
          # Check and rebuild cogutil if build directory missing
          if [ ! -d "orc-dv/cogutil/build" ]; then
            echo "cogutil build directory missing, rebuilding..."
            cd orc-dv/cogutil
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-dv/cogutil/build && sudo make install && sudo ldconfig
          
          # Check and rebuild atomspace if build directory missing  
          if [ ! -d "orc-as/atomspace/build" ]; then
            echo "atomspace build directory missing, rebuilding..."
            cd orc-as/atomspace
            # Create missing lib directory if it doesn't exist
            if [ ! -d "lib" ]; then
              mkdir -p lib
              echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
            fi
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-as/atomspace/build && sudo make install && sudo ldconfig
          
          # Check and rebuild ure if build directory missing
          if [ ! -d "orc-ai/ure/build" ]; then
            echo "ure build directory missing, rebuilding..."
            cd orc-ai/ure
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-ai/ure/build && sudo make install && sudo ldconfig
          
      - name: Build Asmoses
        run: |
          cd orc-ai/asmoses
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          
      - name: Test Asmoses
        run: |
          cd orc-ai/asmoses/build
          make test || true

  # ==== Learning ====
  learn:
    runs-on: ubuntu-latest
    needs: [pln, miner, asmoses]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev
          
      - name: Restore caches
        uses: actions/cache@v3
        with:
          path: |
            orc-dv/cogutil/build
            orc-as/atomspace/build
            orc-ai/ure/build
          key: deps-learn-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-${{ github.sha }}
            atomspace-${{ runner.os }}-${{ github.sha }}
            ure-${{ runner.os }}-${{ github.sha }}
          
      - name: Diagnostic workspace check
        run: |
          echo "WORKSPACE:"
          ls -al
          echo "orc-dv:"
          ls -al orc-dv || true
          echo "orc-dv/cogutil:"
          ls -al orc-dv/cogutil || true
          echo "orc-as:"
          ls -al orc-as || true
          echo "orc-as/atomspace:"
          ls -al orc-as/atomspace || true
          echo "orc-ai:"
          ls -al orc-ai || true
          echo "orc-ai/ure:"
          ls -al orc-ai/ure || true
          
      - name: Install dependencies
        run: |
          # Check and rebuild cogutil if build directory missing
          if [ ! -d "orc-dv/cogutil/build" ]; then
            echo "cogutil build directory missing, rebuilding..."
            cd orc-dv/cogutil
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-dv/cogutil/build && sudo make install && sudo ldconfig
          
          # Check and rebuild atomspace if build directory missing  
          if [ ! -d "orc-as/atomspace/build" ]; then
            echo "atomspace build directory missing, rebuilding..."
            cd orc-as/atomspace
            # Create missing lib directory if it doesn't exist
            if [ ! -d "lib" ]; then
              mkdir -p lib
              echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
            fi
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-as/atomspace/build && sudo make install && sudo ldconfig
          
          # Check and rebuild ure if build directory missing
          if [ ! -d "orc-ai/ure/build" ]; then
            echo "ure build directory missing, rebuilding..."
            cd orc-ai/ure
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-ai/ure/build && sudo make install && sudo ldconfig
          
      - name: Build Learn
        run: |
          cd orc-ai/learn
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          
      - name: Test Learn
        run: |
          cd orc-ai/learn/build
          make test || true

  # ==== Integration ====
  opencog-central:
    runs-on: ubuntu-latest
    needs: [learn, atomspace-rocks, atomspace-restful, moses]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev
          
      - name: Restore all caches
        uses: actions/cache@v3
        with:
          path: |
            orc-dv/cogutil/build
            orc-as/atomspace/build
            orc-ai/ure/build
          key: deps-central-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            cogutil-${{ runner.os }}-${{ github.sha }}
            atomspace-${{ runner.os }}-${{ github.sha }}
            ure-${{ runner.os }}-${{ github.sha }}
          
      - name: Diagnostic workspace check
        run: |
          echo "WORKSPACE:"
          ls -al
          echo "orc-dv:"
          ls -al orc-dv || true
          echo "orc-dv/cogutil:"
          ls -al orc-dv/cogutil || true
          echo "orc-as:"
          ls -al orc-as || true
          echo "orc-as/atomspace:"
          ls -al orc-as/atomspace || true
          echo "orc-ai:"
          ls -al orc-ai || true
          echo "orc-ai/ure:"
          ls -al orc-ai/ure || true
          
      - name: Install all dependencies
        run: |
          # Check and rebuild cogutil if build directory missing
          if [ ! -d "orc-dv/cogutil/build" ]; then
            echo "cogutil build directory missing, rebuilding..."
            cd orc-dv/cogutil
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-dv/cogutil/build && sudo make install && sudo ldconfig
          
          # Check and rebuild atomspace if build directory missing  
          if [ ! -d "orc-as/atomspace/build" ]; then
            echo "atomspace build directory missing, rebuilding..."
            cd orc-as/atomspace
            # Create missing lib directory if it doesn't exist
            if [ ! -d "lib" ]; then
              mkdir -p lib
              echo "# Empty lib directory for build compatibility" > lib/CMakeLists.txt
            fi
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-as/atomspace/build && sudo make install && sudo ldconfig
          
          # Check and rebuild ure if build directory missing
          if [ ! -d "orc-ai/ure/build" ]; then
            echo "ure build directory missing, rebuilding..."
            cd orc-ai/ure
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            cd ../../..
          fi
          cd orc-ai/ure/build && sudo make install && sudo ldconfig
          
      - name: Build OpenCog Central
        run: |
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          
      - name: Test OpenCog Central
        run: |
          cd build
          make test || true

  # ==== Packaging ====
  opencog-debian:
    runs-on: ubuntu-latest
    needs: [opencog-central]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install packaging dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential debhelper fakeroot
          
      - name: Build Debian Package
        run: |
          if [ -d "debian" ]; then
            dpkg-buildpackage -us -uc -b
          else
            echo "Debian packaging not available"
          fi

  # ==== Documentation Generation ====
  generate-docs:
    runs-on: ubuntu-latest
    needs: [opencog-central]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install documentation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip graphviz
          pip3 install --user mermaid-cli
          
      - name: Generate Mermaid diagrams
        run: |
          if [ -f "generate_mermaid_diagrams.py" ]; then
            python3 generate_mermaid_diagrams.py
          fi
          
      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: |
            *.md
            *.svg
            *.png