#
# control.py - Control messages issued by the operator or pupeteer
# Copyright (C) 2016, 2017  Hanson Robotics
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301  USA

import rospy
from std_msgs.msg import String
from atomic_msgs import AtomicMsgs

'''
    This implements a ROS node that subscribes to a mish-mash of
    control and pupeteering topics. Most of these are generated by
    the GUI control panel.  Some of these are fairly fundamental
    (turning the robot on and off) and some are hacky (fine-tuning
    misc openpsi parameters).
'''

class Control:
	def __init__(self):
		self.atomo = AtomicMsgs()
		rospy.Subscriber("/behavior_switch", String,
			self.behavior_switch_cb)

	# The 'btree_on' and 'btree_off' data-strings shouldn't be used,
	# as they are meant for switching on and off non-opencog demos.
	def behavior_switch_cb(self, data):
		print "Received /behavior_switch " + data.data
		if data.data == "opencog_on":
			self.atomo.wholeshow_start()

		if data.data == "opencog_off":
			self.atomo.wholeshow_stop()
