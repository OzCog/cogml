# .github/workflows/main.yml

name: Main CI Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  cogutil:
    name: Build and Test CogUtil
    runs-on: ubuntu-latest
    container:
      image: opencog/opencog-deps
      options: --user root
    steps:
      - name: Checkout CogUtil Repository
        uses: actions/checkout@v4
        with:
          repository: your-org/cogutil
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Ccache
        uses: actions/cache@v4
        with:
          path: /ws/ccache
          key: ccache-cogutil-${{ runner.os }}-${{ hashFiles('**/*.cpp', '**/*.h') }}
          restore-keys: |
            ccache-cogutil-${{ runner.os }}-
            ccache-cogutil-

      - name: Configure Build
        run: |
          mkdir -p build
          cd build
          cmake ..

      - name: Build and Install
        run: |
          cd build
          make
          make install

  atomspace:
    name: Build and Test AtomSpace
    needs: cogutil
    runs-on: ubuntu-latest
    container:
      image: opencog/opencog-deps
      options: --user root
    services:
      postgres:
        image: opencog/postgres
        env:
          POSTGRES_DB: atomspace
          POSTGRES_USER: opencog_test
          POSTGRES_PASSWORD: cheese
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U opencog_test"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      PGHOST: localhost
      PGUSER: opencog_test
      PGPASSWORD: cheese
      CCACHE_DIR: /ws/ccache
      MAKEFLAGS: -j2
    steps:
      - name: Checkout AtomSpace Repository
        uses: actions/checkout@v4
        with:
          repository: your-org/atomspace
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for PostgreSQL to Start
        run: sleep 30

      - name: Set up Ccache
        uses: actions/cache@v4
        with:
          path: /ws/ccache
          key: ccache-atomspace-${{ runner.os }}-${{ hashFiles('**/*.cpp', '**/*.h') }}
          restore-keys: |
            ccache-atomspace-${{ runner.os }}-
            ccache-atomspace-

      - name: Configure Build
        run: |
          mkdir -p build
          cd build
          cmake ..

      - name: Build and Install
        run: |
          cd build
          make
          make install

  cogserver:
    name: Build and Test CogServer
    needs: atomspace
    runs-on: ubuntu-latest
    container:
      image: opencog/opencog-deps
      options: --user root
    steps:
      - name: Checkout CogServer Repository
        uses: actions/checkout@v4
        with:
          repository: your-org/cogserver
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Ccache
        uses: actions/cache@v4
        with:
          path: /ws/ccache
          key: ccache-cogserver-${{ runner.os }}-${{ hashFiles('**/*.cpp', '**/*.h') }}
          restore-keys: |
            ccache-cogserver-${{ runner.os }}-
            ccache-cogserver-

      - name: Configure Build
        run: |
          mkdir -p build
          cd build
          cmake ..

      - name: Build and Install
        run: |
          cd build
          make
          make install

  attention:
    name: Build and Test Attention
    needs: cogserver
    runs-on: ubuntu-latest
    container:
      image: opencog/opencog-deps
      options: --user root
    steps:
      - name: Checkout Attention Repository
        uses: actions/checkout@v4
        with:
          repository: your-org/attention
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Ccache
        uses: actions/cache@v4
        with:
          path: /ws/ccache
          key: ccache-attention-${{ runner.os }}-${{ hashFiles('**/*.cpp', '**/*.h') }}
          restore-keys: |
            ccache-attention-${{ runner.os }}-
            ccache-attention-

      - name: Configure Build
        run: |
          mkdir -p build
          cd build
          cmake ..

      - name: Build and Install
        run: |
          cd build
          make
          make install

  ure:
    name: Build and Test URE
    needs: attention
    runs-on: ubuntu-latest
    container:
      image: opencog/opencog-deps
      options: --user root
    steps:
      - name: Checkout URE Repository
        uses: actions/checkout@v4
        with:
          repository: your-org/ure
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Ccache
        uses: actions/cache@v4
        with:
          path: /ws/ccache
          key: ccache-ure-${{ runner.os }}-${{ hashFiles('**/*.cpp', '**/*.h') }}
          restore-keys: |
            ccache-ure-${{ runner.os }}-
            ccache-ure-

      - name: Configure Build
        run: |
          mkdir -p build
          cd build
          cmake ..

      - name: Build and Install
        run: |
          cd build
          make
          make install

  miner:
    name: Build and Test Miner
    needs: ure
    runs-on: ubuntu-latest
    container:
      image: opencog/opencog-deps
      options: --user root
    steps:
      - name: Checkout Miner Repository
        uses: actions/checkout@v4
        with:
          repository: your-org/miner
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Ccache
        uses: actions/cache@v4
        with:
          path: /ws/ccache
          key: ccache-miner-${{ runner.os }}-${{ hashFiles('**/*.cpp', '**/*.h') }}
          restore-keys: |
            ccache-miner-${{ runner.os }}-
            ccache-miner-

      - name: Configure Build
        run: |
          mkdir -p build
          cd build
          cmake ..

      - name: Build and Install
        run: |
          cd build
          make
          make install

  package:
    name: Package and Deploy
    needs: miner
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    container:
      image: opencog/opencog-deps
      options: --user root
    steps:
      - name: Checkout Main Repository
        uses: actions/checkout@v4
        with:
          repository: your-org/your-main-repo
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Package
        run: |
          mkdir -p build
          cd build
          cmake ..
          make
          # Add packaging commands here
          # e.g., make package

      - name: Deploy Package
        run: |
          # Add deployment commands here
          echo "Deploying package..."
