/*
 * tests/pln/rules/ReductRulesUTest.cxxtest
 *
 * Copyright (C) 2019 Kasim
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/util/Logger.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/atomspace/AtomSpace.h>
#include <cxxtest/TestSuite.h>
#include <string>

using namespace opencog;
using namespace std;

class ReductRulesUTest : public CxxTest::TestSuite
{
private:
	AtomSpacePtr as;
	SchemeEval eval;

public:
	ReductRulesUTest() : as(createAtomSpace()), eval(as)
	{
		logger().set_level(Logger::DEBUG);
		logger().set_timestamp_flag(false);
		logger().set_print_to_stdout_flag(true);

		const string UREreductUTest_rules_dir=string(PROJECT_SOURCE_DIR) + "/tests/urereduct/rules";
		const string UREreduct_rules_dir=string(PROJECT_SOURCE_DIR) + "/opencog/asmoses/urereduct/rules";

		eval.eval(string("(add-to-load-path \"") + UREreductUTest_rules_dir + string("\")"));
		eval.eval(string("(add-to-load-path \"") + UREreduct_rules_dir + string("\")"));

		eval.eval("(use-modules (opencog))");
		eval.eval("(use-modules (opencog exec) (opencog reduct))");
	}

	~ReductRulesUTest()
	{
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().get_filename().c_str());
	}

	void setUp();

	void tearDown();

	void load_scm_files(std::vector<std::string>);
	void test_and_idenityT();
	void test_or_identityT();
	void test_and_identityF();
	void test_or_identityF();
	void test_or_identity();
	void test_double_not();
//	void test_and_or_iden();
//	void test_or_and_iden();
//	void test_dist_and();
//	void test_dist_or();

};

void ReductRulesUTest::tearDown()
{
}

void ReductRulesUTest::setUp()
{
	as->clear();
}

void ReductRulesUTest::load_scm_files(std::vector<std::string> files)
{
	std::string hd("(load-from-path \"");
	std::string tl("\")");
	for (auto f: files) {
		string result = eval.eval(hd + f + tl);

		logger().debug() << "[ReductRulesUTest] Loaded \"" << f << "\":"
		                 << std::endl << result;
	}
}

void ReductRulesUTest::test_and_idenityT()
{
	std::vector<std::string> str = {"logical-rules.scm", "logical-rulesUTest.scm"};
	load_scm_files(str);
	std::string testcase = eval.eval("(cog-execute! testcase1)");
	std::string result = eval.eval("(cog-execute! and-identity-true)");
	std::string expected = eval.eval("(cog-execute! expected1)");
	TS_ASSERT_EQUALS(result, expected);
}

void ReductRulesUTest::test_or_identityT()
{
	std::vector<std::string> str = {"logical-rules.scm", "logical-rulesUTest.scm"};
	load_scm_files(str);
	std::string testcase = eval.eval("(cog-execute! testcase2)");
	std::string result = eval.eval("(cog-execute! or-identity-true)");
	std::string expected = eval.eval("(cog-execute! expected2)");
	TS_ASSERT_EQUALS(result, expected);
}

void ReductRulesUTest::test_and_identityF()
{
	std::vector<std::string> str = {"logical-rules.scm", "logical-rulesUTest.scm"};
	load_scm_files(str);
	std::string testcase = eval.eval("(cog-execute! testcase1)");
	std::string result = eval.eval("(cog-execute! and-identity-false)");
	std::string expected = eval.eval("(cog-execute! expected3)");
	TS_ASSERT_EQUALS(result, expected);
}

void ReductRulesUTest::test_or_identityF()
{
	std::vector<std::string> str = {"logical-rules.scm", "logical-rulesUTest.scm"};
	load_scm_files(str);
	std::string testcase = eval.eval("(cog-execute! testcase2)");
	std::string result = eval.eval("(cog-execute! or-identity-false)");
	std::string expected = eval.eval("(cog-execute! expected4)");
	TS_ASSERT_EQUALS(result, expected);
}

void ReductRulesUTest::test_or_identity()
{
	std::vector<std::string> str = {"logical-rules.scm", "logical-rulesUTest.scm"};
	load_scm_files(str);
	std::string testcase = eval.eval("(cog-execute! testcase2)");
	std::string result = eval.eval("(cog-execute!  or-identity)");
	std::string expected = eval.eval("(cog-execute! expected5)");
	TS_ASSERT_EQUALS(result, expected);
}
//void ReductRulesUTest::test_and_or_iden()
//{
//	std::vector<std::string> str = {"logical-rules.scm", "logical-rulesUTest.scm"};
//	load_scm_files(str);
//	std::string testcase = eval.eval("(cog-execute! testcase6)");
//	std::string result = eval.eval("(cog-execute!  and-or-identity)");
//	std::string expected = eval.eval("(cog-execute! expected6)");
//	TS_ASSERT_EQUALS(result, expected);
//}
//
//void ReductRulesUTest::test_or_and_iden()
//{
//	std::vector<std::string> str = {"logical-rules.scm", "logical-rulesUTest.scm"};
//	load_scm_files(str);
//	std::string testcase = eval.eval("(cog-execute! testcase7)");
//	std::string result = eval.eval("(cog-execute!  or-and-identity)");
//	std::string expected = eval.eval("(cog-execute! expected7)");
//	TS_ASSERT_EQUALS(result, expected);
//}

void ReductRulesUTest::test_double_not()
{
	std::vector<std::string> str = {"logical-rules.scm", "logical-rulesUTest.scm"};
	load_scm_files(str);
	std::string testcase = eval.eval("(cog-execute! testcase8)");
	std::string result = eval.eval("(cog-execute!  double-not)");
	std::string expected = eval.eval("(cog-execute! expected8)");
	TS_ASSERT_EQUALS(result, expected);
}

//void ReductRulesUTest::test_dist_and()
//{
//	std::vector<std::string> str = {"logical-rules.scm", "logical-rulesUTest.scm"};
//	load_scm_files(str);
//	std::string testcase = eval.eval("(cog-execute! testcase9)");
//	std::string result = eval.eval("(cog-execute! distribuitive-and )");
//	std::string expected = eval.eval("(cog-execute! expected9)");
//	TS_ASSERT_EQUALS(result, expected);
//}
//void ReductRulesUTest::test_dist_or()
//{
//	std::vector<std::string> str = {"logical-rules.scm", "logical-rulesUTest.scm"};
//	load_scm_files(str);
//	std::string testcase = eval.eval("(cog-execute! testcase10)");
//	std::string result = eval.eval("(cog-execute! distribuitive-or)");
//	std::string expected = eval.eval("(cog-execute! expected10)");
//	TS_ASSERT_EQUALS(result, expected);
//}

