/** AtomeseTypeCheckerUTest ---
 *
 * Copyright (C) 2019 OpenCog Foundation
 *
 * Author: Kiros Hailay
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <opencog/asmoses/combo/type_checker/type_tree.h>
#include <opencog/atoms/base/Node.h>
#include <opencog/atoms/base/Link.h>
#include <opencog/atoms/base/Handle.h>
#include <opencog/asmoses/atomese/atom_types/atom_types.h>
#include <opencog/asmoses/combo/converter/combo_atomese.h>

using namespace opencog;
using namespace opencog::combo;


class AtomeseTypeCheckerUTest : public CxxTest::TestSuite
{

public:

	void test_infer_atomese_type1()
	{
		Handle p1 = createNode(PREDICATE_NODE, "$x");
		Handle p2 = createNode(PREDICATE_NODE, "$y");
		Handle p3 = createNode(PREDICATE_NODE, "$z");

		HandleSeq handleSeq1 = {p1, p2};
		Handle program1 = createLink(handleSeq1, AND_LINK);

		HandleSeq handleSeq2 = {program1, p3};
		Handle program = createLink(handleSeq2, OR_LINK);

		// infer atomese type tree
		auto result = infer_atomese_type(program);

		// expected output
		Handle b1 = createNode(TYPE_NODE, "BooleanNode");
		Handle b2 = createNode(TYPE_NODE, "BooleanNode");
		Handle b3 = createNode(TYPE_NODE, "BooleanNode");
		Handle b4 = createNode(TYPE_NODE, "BooleanNode");

		HandleSeq handleSeq4 = {b1, b2, b3};
		Handle listlink = createLink(handleSeq4, LIST_LINK);
		HandleSeq handleSeq5 = {listlink, b4};
		Handle expected = createLink(handleSeq5, ARROW_LINK);

		TS_ASSERT(content_eq(result, expected));
	}

	void test_infer_atomese_type2()
	{
		Handle c1 = createNode(SCHEMA_NODE, "$c1");
		Handle c2 = createNode(SCHEMA_NODE, "$c2");

		HandleSeq handleSeq = {c1, c2};
		Handle program = createLink(handleSeq, PLUS_LINK);

		// infer atomese type
		auto result = infer_atomese_type(program);


		// expected output
		Handle c3 = createNode(TYPE_NODE, "NumberNode");
		Handle c4 = createNode(TYPE_NODE, "NumberNode");
		Handle c5 = createNode(TYPE_NODE, "NumberNode");

		HandleSeq handleSeq2 = {c3, c4};
		Handle listlink = createLink(handleSeq2, LIST_LINK);
		HandleSeq handleSeq4 = {listlink, c5};
		Handle expected = createLink(handleSeq4, ARROW_LINK);

		TS_ASSERT(content_eq(result, expected));

	}

};
